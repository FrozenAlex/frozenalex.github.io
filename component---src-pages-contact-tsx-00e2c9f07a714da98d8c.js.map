{"version":3,"sources":["webpack:///./src/components/loadingOverlay.tsx","webpack:///./src/pages/contact.tsx"],"names":["LoadingOverlay","isLoading","message","children","className","style","display","size","ContactPage","React","constructor","props","super","this","state","form","name","loading","loadingMessage","result","render","data","location","siteTitle","site","siteMetadata","title","action","method","encType","onSubmit","handleSubmit","bind","htmlFor","id","value","onChange","handleChange","type","placeholder","maxLength","required","rows","e","setState","target","validate","preventDefault","alert","FormData","append","file","document","getElementById","files","fetch","body","json","console","log","pageQuery"],"mappings":"kMAwBeA,MAlBQ,EACrBC,YACAC,UACAC,cAOE,uBAAKC,UAAU,6CAA6CC,MAAQJ,EAAkC,GAAtB,CAAEK,QAAS,SACzF,gBAAC,IAAD,CAAWF,UAAU,kBAAkBG,KAAM,KAC7C,uBAAKH,UAAU,mBAAmBF,GAAW,IAC5CC,GCFP,MAAMK,UAAoBC,YACxBC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,MAAQ,CACXC,KAAM,CACJC,KAAM,GACNd,QAAS,GACTe,SAAS,EACTC,eAAgB,GAChBC,OAAQ,KAIdC,SACE,IAAI,KAAEC,EAAF,SAAQC,GAAaT,KAAKF,MAC9B,MAAMY,EAAYF,EAAKG,KAAKC,aAAaC,MAEzC,OACE,gBAAC,IAAD,CAAQJ,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAM,YAEX,sBAAItB,UAAU,4BAAd,gBACA,uBAAKA,UAAU,0EACZS,KAAKC,MAAMC,KAAKI,QAAU,IAE7B,wBACEQ,OAAO,wCACPC,OAAO,OACPxB,UAAU,mBACVyB,QAAQ,sBACRC,SAAUjB,KAAKkB,aAAaC,KAAKnB,OAGjC,uBAAKT,UAAU,QACb,yBACEA,UAAU,yDACV6B,QAAQ,QAFV,kBAMA,yBACE7B,UAAU,6HACV8B,GAAG,OACHC,MAAOtB,KAAKC,MAAMC,KAAKC,KACvBoB,SAAUvB,KAAKwB,aAAaL,KAAKnB,MACjCyB,KAAK,OACLC,YAAY,aACZvB,KAAK,OACLwB,UAAW,IACXC,UAAQ,KAIZ,uBAAKrC,UAAU,QACb,yBACEA,UAAU,0DACV6B,QAAQ,WAFV,WAMA,4BACE7B,UAAU,sIACV8B,GAAG,UACHK,YAAY,UACZH,SAAUvB,KAAKwB,aAAaL,KAAKnB,MACjCsB,MAAOtB,KAAKC,MAAMC,KAAKb,QACvBc,KAAK,UACL0B,KAAM,EACNF,UAAW,KACXC,UAAQ,KAIZ,uBAAKrC,UAAU,QACb,yBACEA,UAAU,yDACV6B,QAAQ,QAFV,QAMA,yBACE7B,UAAU,6HACV8B,GAAG,OACHI,KAAK,OACLC,YAAY,OACZvB,KAAK,UAGT,uBAAKZ,UAAU,oBACb,yBACEA,UAAU,sKACVkC,KAAK,SACLH,MAAM,aAIZ,gBAAC,EAAD,CACElC,UAAWY,KAAKC,MAAMC,KAAKE,QAC3Bf,QAASW,KAAKC,MAAMC,KAAKG,kBAKjCmB,aAAaM,GACX9B,KAAK+B,SAAS,CAAE7B,KAAM,IAAKF,KAAKC,MAAMC,KAAM,CAAC4B,EAAEE,OAAOX,IAAKS,EAAEE,OAAOV,SAEtEW,WACE,MAAkC,IAA3BjC,KAAKC,MAAMC,KAAKb,SAAyC,IAAxBW,KAAKC,MAAMC,KAAKC,KAE1D,mBAAmB2B,GAEjB,GADAA,EAAEI,kBACGlC,KAAKiC,WAER,YADAE,MAAM,+CAGR,IAAI3B,EAAO,IAAI4B,SACf5B,EAAK6B,OAAO,OAAQrC,KAAKC,MAAMC,KAAKC,MACpCK,EAAK6B,OAAO,UAAWrC,KAAKC,MAAMC,KAAKb,SACvC,IACIiD,EADYC,SAASC,eAAe,QACnBC,MAAM,GACvBH,GACF9B,EAAK6B,OAAO,OAAQC,GAGtB,IACEtC,KAAK+B,SAAS,CACZ7B,KAAM,IACDF,KAAKC,MAAMC,KACdG,eAAgB,2CAChBD,SAAS,KAGb,IAAIE,QAAeoC,MAAM,4CAA6C,CACpE3B,OAAQ,OACR4B,KAAMnC,IAEJoC,QAAatC,EAAOsC,OACN,YAAdA,EAAKnB,KACPzB,KAAK+B,SAAS,CACZ7B,KAAM,IACDF,KAAKC,MAAMC,KACdI,OAAQ,gEACRF,SAAS,KAIbJ,KAAK+B,SAAS,CACZ7B,KAAM,IACDF,KAAKC,MAAMC,KACdI,OAAQ,8DACRF,SAAS,KAIfyC,QAAQC,IAAIF,GACZ,MAAOd,GACPe,QAAQC,IAAIhB,GACZ9B,KAAK+B,SAAS,CACZ7B,KAAM,IACDF,KAAKC,MAAMC,KACdI,OAAQ,8DACRF,SAAS,OAOJT,YAER,MAAMoD,EAAY","file":"component---src-pages-contact-tsx-00e2c9f07a714da98d8c.js","sourcesContent":["/**\n * Simple loading overlay component\n */\nimport * as React from \"react\"\nimport { FaSpinner } from \"react-icons/fa\"\n\nconst LoadingOverlay = ({\n  isLoading,\n  message,\n  children,\n}: {\n  isLoading: boolean\n  message?: string\n  children?: React.ReactNode\n}) => {\n  return (\n    <div className=\"loading-overlay bg-background text-primary\" style={!isLoading ? { display: \"none\" } : {}}>\n      <FaSpinner className=\"loading-spinner\" size={35}></FaSpinner>\n      <div className=\"loading-message\">{message || \"\"}</div>\n      {children}\n    </div>\n  )\n}\n\nexport default LoadingOverlay\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../layouts/layout\"\nimport SEO from \"../components/seo\"\nimport LoadingOverlay from \"../components/loadingOverlay\"\n\ninterface ContactPageState {\n  form: {\n    name: string\n    message: string\n    loading: boolean\n    loadingMessage: string\n    result: string\n  }\n}\n\nclass ContactPage extends React.Component<any, ContactPageState> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      form: {\n        name: \"\",\n        message: \"\",\n        loading: false,\n        loadingMessage: \"\",\n        result: \"\",\n      },\n    }\n  }\n  render() {\n    let { data, location } = this.props\n    const siteTitle = data.site.siteMetadata.title\n\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"Contact\" />\n        {/* Hero */}\n        <h1 className=\"m-5 text-2xl text-center\">Contact form</h1>\n        <div className=\"mx-auto max-w-md  bg-teal-400 result m-4 font-bold text-xl text-center\">\n          {this.state.form.result || \"\"}\n        </div>\n        <form\n          action=\"https://frozen-feedback.herokuapp.com\"\n          method=\"POST\"\n          className=\"max-w-md mx-auto\"\n          encType=\"multipart/form-data\"\n          onSubmit={this.handleSubmit.bind(this)}\n        >\n          {/* Name */}\n          <div className=\"mb-4\">\n            <label\n              className=\"block text-gray-700 text-md text-center font-bold mb-2\"\n              htmlFor=\"name\"\n            >\n              Name and Email\n            </label>\n            <input\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"name\"\n              value={this.state.form.name}\n              onChange={this.handleChange.bind(this)}\n              type=\"text\"\n              placeholder=\"Name/Email\"\n              name=\"name\"\n              maxLength={200}\n              required\n            />\n          </div>\n          {/* Message */}\n          <div className=\"mb-4\">\n            <label\n              className=\"block text-gray-700  text-md text-center font-bold mb-2\"\n              htmlFor=\"message\"\n            >\n              Message\n            </label>\n            <textarea\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline resize-y\"\n              id=\"message\"\n              placeholder=\"Message\"\n              onChange={this.handleChange.bind(this)}\n              value={this.state.form.message}\n              name=\"message\"\n              rows={5}\n              maxLength={3896}\n              required\n            />\n          </div>\n          {/* Filename */}\n          <div className=\"mb-4\">\n            <label\n              className=\"block text-gray-700 text-md text-center font-bold mb-2\"\n              htmlFor=\"file\"\n            >\n              File\n            </label>\n            <input\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"file\"\n              type=\"file\"\n              placeholder=\"File\"\n              name=\"file\"\n            />\n          </div>\n          <div className=\"mb-4 text-center\">\n            <input\n              className=\"focus:outline-none bg-buttonbgp text-buttontxp font-semibold rounded-full py-3 md:py-4 px-5 md:px-8 shadow-lg uppercase tracking-wider text-sm disabled:opacity-75 \"\n              type=\"submit\"\n              value=\"Submit\"\n            />\n          </div>\n        </form>\n        <LoadingOverlay\n          isLoading={this.state.form.loading}\n          message={this.state.form.loadingMessage}\n        />\n      </Layout>\n    )\n  }\n  handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ form: { ...this.state.form, [e.target.id]: e.target.value } })\n  }\n  validate() {\n    return this.state.form.message != \"\" && this.state.form.name != \"\"\n  }\n  async handleSubmit(e: HTMLFormElement) {\n    e.preventDefault()\n    if (!this.validate()) {\n      alert(\"Invalid input. Check your name and message!\")\n      return\n    }\n    let data = new FormData()\n    data.append(\"name\", this.state.form.name)\n    data.append(\"message\", this.state.form.message)\n    let fileInput = document.getElementById(\"file\") as HTMLInputElement\n    let file = fileInput.files[0]\n    if (file) {\n      data.append(\"file\", file)\n    }\n\n    try {\n      this.setState({\n        form: {\n          ...this.state.form,\n          loadingMessage: \"Trying to send a message, please wait...\",\n          loading: true,\n        },\n      })\n      let result = await fetch(\"https://frozen-feedback.herokuapp.com/api\", {\n        method: \"POST\",\n        body: data,\n      })\n      let json = await result.json()\n      if (json.type === \"success\") {\n        this.setState({\n          form: {\n            ...this.state.form,\n            result: \"Your message has been delivered. Thank you for your feedback!\",\n            loading: false,\n          },\n        })\n      } else {\n        this.setState({\n          form: {\n            ...this.state.form,\n            result: \"Something went wrong, contact me on social media instead...\",\n            loading: false,\n          },\n        })\n      }\n      console.log(json)\n    } catch (e) {\n      console.log(e)\n      this.setState({\n        form: {\n          ...this.state.form,\n          result: \"Something went wrong, contact me on social media instead...\",\n          loading: false,\n        },\n      })\n    }\n  }\n}\n\nexport default ContactPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}